%{

#include <iostream>
#include <string>
#include <vector>

//#include "ast.hpp"
#include "cond.hpp"
using namespace std;

void yyerror(const char *s)
{
   std::cerr << s << std::endl;
   exit(EXIT_FAILURE);
}

inline std::string parse_string(std::string tmp)
{
      return tmp.substr(1, tmp.size()-2);
}

int yylex();
static bool indicator = false;

extern FILE* yyin;


%}

%union {
   int numv;
   Expr *expr;
   ExprStr *str_expr;
   std::string *s;
   Instruction *ins;
   vector<Instruction*> *vec;
   std::string *var;
   
}


%right '='
%left '+' '-' IncTk DecTk
%left '*' '/' '%'
%right UMINUS 

%token<numv> NumTk
%type<expr> expr
%type<expr> condExpr 
%type<str_expr> strexpr
%token<s> StrTk
%type<ins> naredba
%type<vec> niz_naredbi
%token<var> VarTk

%token PrintTk IncTk DecTk EqualTk NeEqualTk 
%token LessEqualTk GreaterEqualTk PrintbTk
%token PrintStrTk ForEachTK IfTk ElseTk WhileTk

%%



program: program  naredba
      | naredba 
      ;
naredba:
      PrintTk '(' expr ')' ';' { cout << $3->value() << endl; }
      | PrintbTk '(' condExpr ')' ';' { 
                                          const string str = $3->value() == 1 ?  "true" : "false";
                                          cout << str << endl;
                                     }
      | PrintStrTk '(' strexpr ')' ';'  { 
                                                if(!indicator)
                                                      cout << $3->value() << endl;
                                                else
                                                      $$ = new PrintStrings($3);
                                        }
      | ForEachTK '(' container ')' ';' {}
      | IfTk '(' condExpr ')' '{' naredba '}' ElseTk '{' naredba '}' { 
                                                                        $$ = new IfElseCondition($3, $6);
                                                                        $$->run();
                                                                     } 
      | WhileTk '(' condExpr ')' '{' niz_naredbi '}'  { 
                                                            $$ = new WhileCondition($6, $3);
                                                            $$->run();
                                                      }
      ;
niz_naredbi: niz_naredbi naredba {$$->push_back($2); }
      | naredba { 
                  $$ = new vector<Instruction*>();
                  $$->push_back($1);
                }
      ;
condExpr:
      expr EqualTk expr { $$ = new EqualAstExpr($1, $3);}
      | expr NeEqualTk expr { $$ = new NeEqualExpr($1, $3);}
      | expr LessEqualTk expr {$$ = new LessEqualExprAst($1, $3); }
      | expr GreaterEqualTk expr { $$ = new GreaterEqualExprAst($1, $3);}
      | expr '<' expr { $$ = new LessExprAst(std::move($1), std::move($3));}
      | expr '>' expr { $$ = new GreaterExprAst(std::move($1), std::move($3));}
      ;
expr:
      expr '+' expr { 
                      $$ = new AddExprAst($1,$3);
                    }
      | expr '-' expr { $$ = new SubExprAst($1,$3);}
      | '-' expr %prec UMINUS {$$ = new UnaryMinusAst(std::move($2)); }
      | expr '*' expr { $$ = new MulExprAst($1, $3); }
      | expr '/' expr { $$ = new DivExprAst($1, $3); }
      | expr IncTk { $$ = new IncExprAst($1); }
      | expr DecTk { $$ = new DecExprAst($1); }
      | expr '%' expr { $$ = new ModExprAst($1, $3); }
      | VarTk '=' expr {}
      | NumTk { $$ = new Constant($1); }
      ;
      
strexpr:
      strexpr '+' strexpr { $$ = new StrAddAst($1, $3);}
      | NumTk '*' strexpr { $$ = new StrMulAst($1, $3);}
      | strexpr '*' NumTk { $$ = new StrMulAst($1, $3);}
      | StrTk { $$ = new StrConstant(parse_string(*$1)); delete $1;}
      ;
container: 

%%


int main(int argc,char **argv)
{
   
   char *filename;
   if(argc == 2) {
      filename = argv[1];
      cout << filename << endl;
      if((yyin = fopen(filename, "r")) == NULL)
            std::cerr << "You didn't open file" << std::endl;
   } 
   yyparse();
   fclose(yyin);
   
   return EXIT_SUCCESS;
}
